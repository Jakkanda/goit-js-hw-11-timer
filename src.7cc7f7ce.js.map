{"version":3,"sources":["index.js"],"names":["CountdownTimer","selector","targetDate","start","ref","document","querySelector","refs","days","hours","minsEl","secsEl","dateNow","Date","now","deltaTime","calcDays","pad","Math","floor","mins","secs","updateComponents","textContent","value","toString","padStart","setInterval","calcDeltaTime","timeToIndependenceDay"],"mappings":";AA6CA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA7CMA,IAAAA,EAAAA,WACkC,SAAA,EAAA,GAAxBC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAc,EAAA,KAAA,GAC/BA,KAAAA,WAAaA,EACbC,KAAAA,QACAC,KAAAA,IAAMC,SAASC,cAAiBL,GAAAA,OAAAA,IAChCM,KAAAA,KAAO,CACVC,KAAM,KAAKJ,IAAIE,cAAc,2BAC7BG,MAAO,KAAKL,IAAIE,cAAc,4BAC9BI,OAAQ,KAAKN,IAAIE,cAAc,2BAC/BK,OAAQ,KAAKP,IAAIE,cAAc,4BAoCrC,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,gBAhCE,MAAA,WACMM,IAAAA,EAAUC,KAAKC,MACfC,EAAY,KAAKb,WAAaU,EAC7BI,KAAAA,SAASD,KA6BlB,CAAA,IAAA,WA1BE,MAAA,SAASA,GACDP,IAAAA,EAAO,KAAKS,IAAIC,KAAKC,MAAMJ,EAAa,QACxCN,EAAQ,KAAKQ,IAAIC,KAAKC,MAAOJ,EAAa,MAAyB,OACnEK,EAAO,KAAKH,IAAIC,KAAKC,MAAOJ,EAAa,KAAoB,MAC7DM,EAAO,KAAKJ,IAAIC,KAAKC,MAAOJ,EAAa,IAAc,MACxDO,KAAAA,iBAAiBd,EAAMC,EAAOW,EAAMC,KAqB7C,CAAA,IAAA,mBAlBE,MAAA,SAAiBb,EAAMC,EAAOW,EAAMC,GAC7Bd,KAAAA,KAAKC,KAAKe,YAAcf,EACxBD,KAAAA,KAAKE,MAAMc,YAAcd,EACzBF,KAAAA,KAAKG,OAAOa,YAAcH,EAC1Bb,KAAAA,KAAKI,OAAOY,YAAcF,IAcnC,CAAA,IAAA,MAXE,MAAA,SAAIG,GACKA,OAAAA,EAAMC,WAAWC,SAAS,EAAG,OAUxC,CAAA,IAAA,QAPE,MAAA,WAAQ,IAAA,EAAA,KACNC,YAAY,WACV,EAAKC,iBACJ,SAIP,EA7CM5B,GA6CA6B,EAAwB,IAAI7B,EAAe,CAC/CC,SAAU,WACVC,WAAY,IAAIW,KAAK","file":"src.7cc7f7ce.js","sourceRoot":"../src","sourcesContent":["class CountdownTimer {\n  constructor({ selector, targetDate }) {\n    this.targetDate = targetDate;\n    this.start();\n    this.ref = document.querySelector(`${selector}`);\n    this.refs = {\n      days: this.ref.querySelector('span[data-value=\"days\"]'),\n      hours: this.ref.querySelector('span[data-value=\"hours\"]'),\n      minsEl: this.ref.querySelector('span[data-value=\"mins\"]'),\n      secsEl: this.ref.querySelector('span[data-value=\"secs\"]'),\n    };\n  }\n\n  calcDeltaTime() {\n    let dateNow = Date.now();\n    let deltaTime = this.targetDate - dateNow;\n    this.calcDays(deltaTime);\n  }\n\n  calcDays(deltaTime) {\n    const days = this.pad(Math.floor(deltaTime / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((deltaTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((deltaTime % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((deltaTime % (1000 * 60)) / 1000));\n    this.updateComponents(days, hours, mins, secs);\n  }\n\n  updateComponents(days, hours, mins, secs) {\n    this.refs.days.textContent = days;\n    this.refs.hours.textContent = hours;\n    this.refs.minsEl.textContent = mins;\n    this.refs.secsEl.textContent = secs;\n  }\n\n  pad(value) {\n    return value.toString().padStart(2, '0');\n  }\n\n  start() {\n    setInterval(() => {\n      this.calcDeltaTime();\n    }, 1000);\n  }\n}\n\nconst timeToIndependenceDay = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Aug 24 2021'),\n});\n"]}